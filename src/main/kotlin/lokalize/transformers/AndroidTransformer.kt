package lokalize.transformers

import lokalize.models.LSArray
import lokalize.models.Options

class AndroidTransformer : AbstractTransformer() {

    override fun transformArray(array: LSArray): String {
        val builder = StringBuilder("<string-array name=\"${array.key}\">\n")

        array.lines.forEach {
            builder.append("<item>${it.value}</item>").append('\n')
        }

        return builder.append("</string-array>").toString()
    }

    override fun transformComment(comment: String) = "<!-- $comment -->"

    override fun transformKeyValue(key: String, value: String) = "<string name=\"$key\">${normalize(value)}</string>"

    override fun insert(input: String?, newValues: String, options: Options): String {
        val inputString = input ?: ""

        val closeTagIndex = inputString.indexOf("</resources>")

        var output = if (closeTagIndex < 0) {
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n"
        } else {
            val autoGeneratedIndex = inputString.indexOf(AUTOGENERATED_TAG)
            if (autoGeneratedIndex >= 0) {
                inputString.substring(0, autoGeneratedIndex)
            } else {
                inputString.substring(0, closeTagIndex)
            }
        }

        output += "$AUTOGENERATED_TAG\n$newValues\n</resources>";

        return output
    }

    private fun normalize(value: String): String {
        var normalizedValue = value.replace("/%newline%/gi", "\\n")
        normalizedValue = normalizedValue.replace("/'/gi", "\\'")
        normalizedValue = normalizedValue.replace("/%([sdf])/gi", "%#$$$1")
        normalizedValue = normalizedValue.replace("/&/gi", "&amp;")
        normalizedValue = normalizedValue.replace("/\u00A0/gi", "\\u00A0");
        normalizedValue = normalizedValue.replace("/([^\\.]|^)(\\.{3})([^\\.]|$)/gi", "$1&#8230;$3")
        return normalizedValue
    }

    companion object {
        const val AUTOGENERATED_TAG = "<!-- AUTO-GENERATED -->"
    }
}