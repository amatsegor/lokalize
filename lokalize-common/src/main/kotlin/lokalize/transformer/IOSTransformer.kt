package lokalize.transformer

import lokalize.models.Options

class IOSTransformer : AbstractTransformer() {

    //TODO: implement iOS plurals in a right way
    /*override fun transformPlural(plural: LSPlural): String {
        val builder = StringBuilder()
        plural.values.forEach {
            builder.append("${plural.key}.${it.key} = \"${it.value}\";\n")
        }
        return builder.toString()
    }*/

    override fun transformComment(comment: String): String = "// $comment"

    override fun transformKeyValue(key: String, value: String, closing: Boolean): String {
        var normalizedValue = value.replace("/%newline%/gi".toRegex(), "\\n")
        normalizedValue = normalizedValue.replace("/\"/gi".toRegex(), "\"")
        normalizedValue = normalizedValue.replace("/%([@df])/gi".toRegex(), "%$1")
        normalizedValue = normalizedValue.replace("/%s/gi".toRegex(), "%@")

        return "\"$key\" = \"$normalizedValue\";"
    }

    override fun insert(input: String?, newValues: String, options: Options): String {
        var fileInput = input ?: ""

        val generatedIndex = fileInput.indexOf(autogeneratedTag);
        if (generatedIndex >= 0) {
            fileInput = fileInput.substring(0, generatedIndex);
        }

        return fileInput + autogeneratedTag + '\n' + newValues
    }

    override val autogeneratedTag: String
        get() = "// AUTO-GENERATED"

    companion object {
        const val NAME = "ios"
    }
}