package lokalize.transformer

import lokalize.models.LSArray
import lokalize.models.LSPlural
import lokalize.models.Options

class AndroidTransformer : AbstractTransformer() {

    override fun transformArray(array: LSArray): String {
        val builder = StringBuilder("<string-array name=\"${array.key}\">\n")

        array.lines.forEach {
            builder.append("\t<item>${it.value}</item>").append('\n')
        }

        return builder.append("</string-array>").toString()
    }

    override fun transformPlural(plural: LSPlural): String {
        val builder = StringBuilder("<plurals name=\"${plural.key}\">\n").apply {
            plural.values.forEach {
                append("\t<item quantity=\"${it.key}\">${it.value}</item>\n")
            }
            append("</plurals>")
        }
        return builder.toString()
    }

    override fun transformComment(comment: String) = "<!-- $comment -->"

    override fun transformKeyValue(key: String, value: String, closing: Boolean) = "<string name=\"$key\">${normalize(value)}</string>"

    override fun insert(input: String?, newValues: String, options: Options): String {
        val inputString = input ?: ""

        val closingTag = "</resources>"

        val closeTagIndex = inputString.indexOf(closingTag)

        val output = if (closeTagIndex < 0) {
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n"
        } else {
            val autoGeneratedIndex = inputString.indexOf(autogeneratedTag)
            if (autoGeneratedIndex >= 0) {
                inputString.substring(0, autoGeneratedIndex)
            } else {
                inputString.substring(0, closeTagIndex)
            }
        }

        return "$output$autogeneratedTag\n$newValues\n$closingTag"
    }

    private fun normalize(value: String): String {
        var normalizedValue = value.replace("/%newline%/gi".toRegex(), "\\n")
        normalizedValue = normalizedValue.replace("/'/gi".toRegex(), "\\'")
        normalizedValue = normalizedValue.replace("/%([sdf])/gi".toRegex(), "%#$$$1")
        normalizedValue = normalizedValue.replace("/&/gi".toRegex(), "&amp;")
        normalizedValue = normalizedValue.replace("/\u00A0/gi".toRegex(), "\\u00A0");
        normalizedValue = normalizedValue.replace("/([^.]|^)(\\.{3})([^.]|$)/gi".toRegex(), "$1&#8230;$3")
        return normalizedValue
    }

    override val autogeneratedTag: String
        get() = "<!-- AUTO-GENERATED -->"

    companion object {
        const val NAME = "android"
    }
}