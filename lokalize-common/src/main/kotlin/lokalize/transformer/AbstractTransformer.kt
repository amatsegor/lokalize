package lokalize.transformer

import lokalize.models.LSArray
import lokalize.models.LSEntity
import lokalize.models.LSLine
import lokalize.models.Options

abstract class AbstractTransformer {
    open fun transformArray(array: LSArray): String = ""

    abstract fun transformComment(comment: String): String

    abstract fun transformKeyValue(key: String, value: String, closing: Boolean): String

    abstract fun insert(input: String?, newValues: String, options: Options): String

    fun transform(entities: List<LSEntity>): String {
        val valueToInsert = StringBuilder()

        val nonEmptyEntities = entities.filter { entity -> !entity.isEmpty }

        nonEmptyEntities
                .sortedWith(Comparator { e1, e2 ->
                    return@Comparator if (e1 is LSArray) {
                        if (e2 is LSArray) 0 else -1
                    } else {
                        if (e2 is LSArray) 1 else 0
                    }
                })
                .forEachIndexed { index, entity ->
            var skipped = false

            val isClosing = index == nonEmptyEntities.size - 1

            if (entity is LSLine) {
                if (entity.isComment) {
                    valueToInsert.append(transformComment(entity.value))
                } else {
                    valueToInsert.append(transformKeyValue(entity.key, entity.value, isClosing))
                }
            } else if (entity is LSArray) {
                val transformedArray = transformArray(entity)

                if (transformedArray.isBlank()) {
                    skipped = true
                } else {
                    valueToInsert.append(transformedArray)
                }
            }

            if (!isClosing && !skipped) {
                valueToInsert.append('\n')
            }
        }
        return valueToInsert.toString()
    }

    abstract val autogeneratedTag: String
}