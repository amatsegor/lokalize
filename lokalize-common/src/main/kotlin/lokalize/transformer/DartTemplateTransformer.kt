package lokalize.transformer

import lokalize.models.Options

class DartTemplateTransformer : AbstractTransformer() {
    override fun transformComment(comment: String): String = "// $comment"

    override fun transformKeyValue(key: String, value: String, closing: Boolean): String = "  String get $key => get(\"$key\");"

    override fun insert(input: String?, newValues: String, options: Options): String {
        var fileInput = input ?: ""

        val generatedIndex = fileInput.indexOf(autogeneratedTag)
        if (generatedIndex >= 0) {
            fileInput = fileInput.substring(0, generatedIndex)
        }

        val className = options.className ?: "T"
        val header = options.header ?: "library core.t"
        val baseClass = options.baseClass ?: "TranslationSet"

        return fileInput + autogeneratedTag + "\n" +
                header + "\n\n" +
                "class " + className + " extends " + baseClass + " { " + "\n\n" +
                "  " + className + "(values): super(values);" + "\n\n" +
                newValues + "\n" +
                "}"
    }

    override val autogeneratedTag: String
        get() = "// AUTO-GENERATED"

    companion object {
        const val NAME = "dartTemplate"
    }
}